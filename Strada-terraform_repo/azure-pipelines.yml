trigger:
  branches:
    include:
      - main

variables:
  environment: 'dev'  # Change to 'tst' or 'prd' as needed
  ARM_CLIENT_ID: 'd8152502-96f6-4401-91cf-9658dd9e830d'
  ARM_CLIENT_SECRET: 'REPLACE_WITH_SECRET'
  ARM_TENANT_ID: '1658af60-3667-462c-8c0e-8ee391b6cab8'
  ARM_SUBSCRIPTION_ID: 'f5545c7c-1f71-4924-8e15-14cde7221be9'

stages:
- stage: ValidateModules
  displayName: 'Validate Terraform Modules'
  jobs:
  - job: Validate
    pool:
      vmImage: ubuntu-latest
    steps:
    - script: |
        echo "Validating module directories..."
        for module in databricks datafactory keyvault sql storage; do
          if [ ! -d "modules/$module" ]; then
            echo "ERROR: modules/$module directory is missing."
            exit 1
          fi
        done
        echo "All module directories are present."
      displayName: 'Check module directories'

- stage: TerraformPlan
  dependsOn: ValidateModules
  jobs:
  - job: Plan
    pool:
      vmImage: ubuntu-latest
    steps:
    - script: |
        echo "Installing Terraform..."
        sudo apt-get update && sudo apt-get install -y wget unzip
        wget https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
        unzip terraform_1.5.7_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
        terraform -version
      displayName: 'Install Terraform CLI'

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Terraform-Connection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Setting environment variables for Terraform..."
          export ARM_CLIENT_ID=$ARM_CLIENT_ID
          export ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET
          export ARM_TENANT_ID=$ARM_TENANT_ID
          export ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID

          echo "Initializing Terraform..."
          terraform init -upgrade -reconfigure \
            -backend-config="storage_account_name=sttfstatesdev1" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=${environment}.tfstate" \
            -backend-config="resource_group_name=rg-tfstate"

          echo "Attempting to unlock stale state (if any)..."
          terraform force-unlock -force 17bea64f-4080-acdb-ca6d-d142a81fec55 || echo "No active lock to remove."

          echo "Running Terraform Plan with retry..."
          for i in {1..3}; do
            terraform plan -lock=false \
              -var="environment=${environment}" \
              -var-file="environments/${environment}.tfvars" \
              -var "client_id=$ARM_CLIENT_ID" \
              -var "client_secret=$ARM_CLIENT_SECRET" \
              -var "tenant_id=$ARM_TENANT_ID" \
              -var "subscription_id=$ARM_SUBSCRIPTION_ID" && break
            echo "Terraform plan failed. Retrying in 10 seconds... ($i/3)"
            sleep 10
          done
      displayName: 'Terraform Plan'
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        environment: $(environment)

- stage: TerraformApply
  dependsOn: TerraformPlan
  condition: succeeded()
  jobs:
  - job: Apply
    pool:
      vmImage: ubuntu-latest
    steps:
    - script: |
        echo "Installing Terraform..."
        sudo apt-get update && sudo apt-get install -y wget unzip
        wget https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
        unzip terraform_1.5.7_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
        terraform -version
      displayName: 'Install Terraform CLI'

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Terraform-Connection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Setting environment variables for Terraform..."
          export ARM_CLIENT_ID=$ARM_CLIENT_ID
          export ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET
          export ARM_TENANT_ID=$ARM_TENANT_ID
          export ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID

          echo "Initializing Terraform..."
          terraform init -upgrade -reconfigure \
            -backend-config="storage_account_name=sttfstatesdev1" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=${environment}.tfstate" \
            -backend-config="resource_group_name=rg-tfstate"

          echo "Applying Terraform changes..."
          terraform apply -auto-approve \
            -var="environment=${environment}" \
            -var-file="environments/${environment}.tfvars" \
            -var "client_id=$ARM_CLIENT_ID" \
            -var "client_secret=$ARM_CLIENT_SECRET" \
            -var "tenant_id=$ARM_TENANT_ID" \
            -var "subscription_id=$ARM_SUBSCRIPTION_ID"
      displayName: 'Terraform Apply'
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        environment: $(environment)
